{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "MPLP System Integration Rules",
  "description": "Rules for integrating MPLP protocols with various systems, platforms, and enterprise environments",
  "version": "1.0.0",
  "systemIntegrationRules": [
    {
      "ruleId": "SYS-001",
      "name": "Enterprise System Integration",
      "category": "enterprise",
      "scope": "global",
      "priority": "high",
      "description": "Rules for integrating with enterprise systems like ERP, CRM, and HRMS",
      "enterpriseSystems": {
        "erp": {
          "commonSystems": ["SAP", "Oracle", "Microsoft Dynamics", "NetSuite"],
          "integrationPatterns": ["api", "file_transfer", "database_sync", "message_queue"],
          "dataMapping": {
            "Context": "project_master_data",
            "Plan": "project_planning_module",
            "Execute": "execution_tracking",
            "Role": "resource_management"
          }
        },
        "crm": {
          "commonSystems": ["Salesforce", "HubSpot", "Microsoft Dynamics CRM", "Pipedrive"],
          "integrationPatterns": ["rest_api", "webhooks", "bulk_api"],
          "dataMapping": {
            "Context": "opportunity_and_account_data",
            "Plan": "project_pipeline",
            "Delivery": "deliverable_tracking"
          }
        },
        "hrms": {
          "commonSystems": ["Workday", "BambooHR", "ADP", "SuccessFactors"],
          "integrationPatterns": ["api", "csv_import", "ldap_sync"],
          "dataMapping": {
            "Role": "employee_skills_and_availability",
            "Context": "organizational_structure"
          }
        }
      },
      "integrationRequirements": {
        "authentication": "enterprise_sso",
        "authorization": "role_based_access_control",
        "dataGovernance": "comply_with_enterprise_policies",
        "auditTrail": "comprehensive_logging"
      },
      "conditions": {
        "when": "enterprise_system_integration_required",
        "context": "enterprise_environment"
      },
      "actions": {
        "then": "apply_enterprise_integration_patterns",
        "onSuccess": "establish_ongoing_sync",
        "onFailure": "escalate_to_enterprise_architecture_team"
      },
      "enforcement": "mandatory",
      "metadata": {
        "version": "1.0.0",
        "author": "MPLP Core Team",
        "createdAt": "2025-06-28T11:34:54Z",
        "updatedAt": "2025-06-28T11:34:54Z"
      }
    },
    {
      "ruleId": "SYS-002",
      "name": "Cloud Platform Integration",
      "category": "cloud",
      "scope": "global",
      "priority": "high",
      "description": "Rules for integrating with cloud platforms and services",
      "cloudPlatforms": {
        "aws": {
          "services": {
            "compute": ["EC2", "Lambda", "ECS", "EKS"],
            "storage": ["S3", "EFS", "EBS"],
            "database": ["RDS", "DynamoDB", "DocumentDB"],
            "messaging": ["SQS", "SNS", "EventBridge"],
            "monitoring": ["CloudWatch", "X-Ray"]
          },
          "authentication": "iam_roles_and_policies",
          "deployment": "cloudformation_or_cdk"
        },
        "azure": {
          "services": {
            "compute": ["Virtual Machines", "Functions", "Container Instances", "AKS"],
            "storage": ["Blob Storage", "Files", "Disks"],
            "database": ["SQL Database", "Cosmos DB", "PostgreSQL"],
            "messaging": ["Service Bus", "Event Grid", "Event Hubs"],
            "monitoring": ["Monitor", "Application Insights"]
          },
          "authentication": "azure_ad_and_managed_identity",
          "deployment": "arm_templates_or_bicep"
        },
        "gcp": {
          "services": {
            "compute": ["Compute Engine", "Cloud Functions", "Cloud Run", "GKE"],
            "storage": ["Cloud Storage", "Persistent Disk"],
            "database": ["Cloud SQL", "Firestore", "BigQuery"],
            "messaging": ["Pub/Sub", "Cloud Tasks"],
            "monitoring": ["Cloud Monitoring", "Cloud Trace"]
          },
          "authentication": "service_accounts_and_iam",
          "deployment": "deployment_manager_or_terraform"
        }
      },
      "integrationPatterns": {
        "serverless": {
          "protocols": "event_driven_execution",
          "scaling": "automatic",
          "cost": "pay_per_use"
        },
        "containerized": {
          "protocols": "microservices_architecture",
          "scaling": "horizontal_pod_autoscaling",
          "deployment": "kubernetes_manifests"
        },
        "managed_services": {
          "protocols": "api_gateway_integration",
          "scaling": "managed_by_platform",
          "monitoring": "platform_native_tools"
        }
      },
      "conditions": {
        "when": "cloud_platform_deployment_required",
        "context": "cloud_native_environment"
      },
      "actions": {
        "then": "apply_cloud_integration_patterns",
        "onSuccess": "configure_cloud_native_features",
        "onFailure": "fallback_to_traditional_deployment"
      },
      "enforcement": "recommended",
      "metadata": {
        "version": "1.0.0",
        "author": "MPLP Core Team",
        "createdAt": "2025-06-28T11:34:54Z",
        "updatedAt": "2025-06-28T11:34:54Z"
      }
    },
    {
      "ruleId": "SYS-003",
      "name": "DevOps Tool Integration",
      "category": "devops",
      "scope": "global",
      "priority": "high",
      "description": "Rules for integrating with DevOps tools and CI/CD pipelines",
      "devopsTools": {
        "cicd": {
          "tools": ["Jenkins", "GitLab CI", "GitHub Actions", "Azure DevOps", "CircleCI"],
          "integrationPoints": {
            "Plan": "pipeline_definition_and_scheduling",
            "Execute": "build_and_deployment_execution",
            "Test": "automated_testing_integration",
            "Delivery": "artifact_publishing_and_deployment"
          }
        },
        "versionControl": {
          "tools": ["Git", "SVN", "Mercurial"],
          "integrationPoints": {
            "Context": "repository_metadata",
            "Plan": "branch_and_merge_strategies",
            "Execute": "code_commit_tracking",
            "Trace": "change_history_and_blame"
          }
        },
        "monitoring": {
          "tools": ["Prometheus", "Grafana", "ELK Stack", "Splunk", "Datadog"],
          "integrationPoints": {
            "Execute": "runtime_metrics_collection",
            "Test": "performance_and_quality_metrics",
            "Learn": "historical_data_analysis",
            "Trace": "distributed_tracing"
          }
        },
        "containerization": {
          "tools": ["Docker", "Podman", "containerd"],
          "orchestration": ["Kubernetes", "Docker Swarm", "OpenShift"],
          "integrationPoints": {
            "Execute": "containerized_execution_environment",
            "Delivery": "container_image_publishing",
            "Role": "container_resource_allocation"
          }
        }
      },
      "pipelineIntegration": {
        "triggerMechanisms": {
          "webhooks": "git_push_and_merge_events",
          "scheduled": "cron_based_execution",
          "manual": "user_initiated_triggers",
          "api": "programmatic_pipeline_execution"
        },
        "stageMapping": {
          "source": "Context_protocol",
          "build": "Execute_protocol",
          "test": "Test_protocol",
          "deploy": "Delivery_protocol",
          "monitor": "Trace_protocol"
        }
      },
      "conditions": {
        "when": "devops_tool_integration_required",
        "context": "development_environment"
      },
      "actions": {
        "then": "apply_devops_integration_patterns",
        "onSuccess": "establish_automated_workflows",
        "onFailure": "provide_manual_integration_guidance"
      },
      "enforcement": "recommended",
      "metadata": {
        "version": "1.0.0",
        "author": "MPLP Core Team",
        "createdAt": "2025-06-28T11:34:54Z",
        "updatedAt": "2025-06-28T11:34:54Z"
      }
    },
    {
      "ruleId": "SYS-004",
      "name": "Database Integration",
      "category": "database",
      "scope": "global",
      "priority": "high",
      "description": "Rules for integrating with various database systems and data stores",
      "databaseTypes": {
        "relational": {
          "systems": ["PostgreSQL", "MySQL", "SQL Server", "Oracle", "SQLite"],
          "integrationPatterns": {
            "connection_pooling": "required",
            "transaction_management": "acid_compliance",
            "schema_migration": "version_controlled"
          },
          "dataMapping": {
            "Context": "project_tables",
            "Plan": "task_and_timeline_tables",
            "Execute": "execution_log_tables",
            "Role": "user_and_role_tables"
          }
        },
        "nosql": {
          "systems": ["MongoDB", "CouchDB", "DynamoDB", "Cassandra"],
          "integrationPatterns": {
            "document_modeling": "protocol_as_documents",
            "indexing_strategy": "query_optimized",
            "consistency_model": "eventual_consistency_acceptable"
          },
          "dataMapping": {
            "Context": "project_documents",
            "Workflow": "workflow_state_documents",
            "Trace": "event_log_documents"
          }
        },
        "timeseries": {
          "systems": ["InfluxDB", "TimescaleDB", "Prometheus"],
          "integrationPatterns": {
            "data_retention": "configurable_policies",
            "aggregation": "time_based_rollups",
            "querying": "time_range_optimized"
          },
          "dataMapping": {
            "Execute": "execution_metrics_over_time",
            "Test": "test_performance_metrics",
            "Trace": "event_timeline_data"
          }
        },
        "graph": {
          "systems": ["Neo4j", "Amazon Neptune", "ArangoDB"],
          "integrationPatterns": {
            "relationship_modeling": "protocol_dependencies",
            "traversal_queries": "dependency_analysis",
            "graph_algorithms": "path_optimization"
          },
          "dataMapping": {
            "Plan": "task_dependency_graph",
            "Role": "organizational_hierarchy",
            "Workflow": "workflow_stage_relationships"
          }
        }
      },
      "dataConsistency": {
        "transactionBoundaries": {
          "singleProtocol": "protocol_level_transactions",
          "crossProtocol": "distributed_transactions_or_saga_pattern"
        },
        "conflictResolution": {
          "strategy": "last_write_wins_with_versioning",
          "mergeRules": "protocol_specific_merge_logic"
        }
      },
      "conditions": {
        "when": "database_integration_required",
        "context": "persistent_storage_needed"
      },
      "actions": {
        "then": "apply_database_integration_patterns",
        "onSuccess": "establish_data_persistence_layer",
        "onFailure": "fallback_to_file_based_storage"
      },
      "enforcement": "mandatory",
      "metadata": {
        "version": "1.0.0",
        "author": "MPLP Core Team",
        "createdAt": "2025-06-28T11:34:54Z",
        "updatedAt": "2025-06-28T11:34:54Z"
      }
    },
    {
      "ruleId": "SYS-005",
      "name": "Message Queue Integration",
      "category": "messaging",
      "scope": "global",
      "priority": "medium",
      "description": "Rules for integrating with message queue systems for asynchronous communication",
      "messagingPatterns": {
        "publishSubscribe": {
          "systems": ["Apache Kafka", "RabbitMQ", "Redis Pub/Sub", "AWS SNS/SQS"],
          "useCases": {
            "protocolEvents": "broadcast_protocol_state_changes",
            "workflowNotifications": "notify_stakeholders_of_progress",
            "deliveryUpdates": "communicate_delivery_status"
          }
        },
        "requestResponse": {
          "systems": ["RabbitMQ", "Apache ActiveMQ", "Azure Service Bus"],
          "useCases": {
            "roleAssignment": "request_agent_availability",
            "resourceAllocation": "request_resource_reservation",
            "validationRequests": "request_external_validation"
          }
        },
        "eventSourcing": {
          "systems": ["Apache Kafka", "EventStore", "AWS Kinesis"],
          "useCases": {
            "protocolHistory": "maintain_complete_protocol_event_log",
            "auditTrail": "track_all_changes_and_decisions",
            "replayCapability": "reconstruct_protocol_state_from_events"
          }
        }
      },
      "messageFormat": {
        "envelope": {
          "messageId": "uuid",
          "timestamp": "iso8601",
          "source": "protocol_identifier",
          "type": "event_type",
          "version": "schema_version"
        },
        "payload": {
          "format": "json",
          "compression": "optional_gzip",
          "encryption": "optional_aes256"
        }
      },
      "reliabilityFeatures": {
        "deliveryGuarantees": {
          "atLeastOnce": "default",
          "exactlyOnce": "when_supported_by_system",
          "atMostOnce": "for_non_critical_events"
        },
        "durability": {
          "persistence": "messages_persisted_to_disk",
          "replication": "multi_node_replication",
          "retention": "configurable_retention_period"
        },
        "errorHandling": {
          "deadLetterQueue": "for_failed_message_processing",
          "retryPolicy": "exponential_backoff",
          "poisonMessageHandling": "isolate_and_alert"
        }
      },
      "conditions": {
        "when": "asynchronous_communication_required",
        "context": "distributed_system_architecture"
      },
      "actions": {
        "then": "apply_messaging_integration_patterns",
        "onSuccess": "establish_reliable_messaging",
        "onFailure": "fallback_to_synchronous_communication"
      },
      "enforcement": "recommended",
      "metadata": {
        "version": "1.0.0",
        "author": "MPLP Core Team",
        "createdAt": "2025-06-28T11:34:54Z",
        "updatedAt": "2025-06-28T11:34:54Z"
      }
    },
    {
      "ruleId": "SYS-006",
      "name": "Identity and Access Management Integration",
      "category": "security",
      "scope": "global",
      "priority": "high",
      "description": "Rules for integrating with identity and access management systems",
      "iamSystems": {
        "enterpriseDirectory": {
          "systems": ["Active Directory", "LDAP", "Azure AD", "Okta"],
          "integrationMethods": {
            "authentication": "saml_or_oidc",
            "authorization": "role_based_access_control",
            "userProvisioning": "automated_user_lifecycle"
          }
        },
        "cloudIdentity": {
          "systems": ["AWS IAM", "Azure AD", "Google Cloud Identity"],
          "integrationMethods": {
            "authentication": "oauth2_or_oidc",
            "authorization": "attribute_based_access_control",
            "federatedIdentity": "cross_domain_trust"
          }
        },
        "socialIdentity": {
          "systems": ["Google", "Microsoft", "GitHub", "LinkedIn"],
          "integrationMethods": {
            "authentication": "oauth2_social_login",
            "authorization": "scope_based_permissions",
            "profileMapping": "social_profile_to_mplp_role"
          }
        }
      },
      "accessControlModel": {
        "roleBasedAccess": {
          "roles": ["admin", "project_manager", "developer", "tester", "stakeholder"],
          "permissions": {
            "Context": "read_write_based_on_role",
            "Plan": "create_modify_based_on_role",
            "Execute": "execute_monitor_based_on_role",
            "Role": "assign_manage_based_on_role"
          }
        },
        "attributeBasedAccess": {
          "attributes": ["department", "project", "security_clearance", "location"],
          "policies": "xacml_or_custom_policy_language",
          "evaluation": "real_time_policy_evaluation"
        }
      },
      "securityFeatures": {
        "singleSignOn": {
          "protocols": ["SAML 2.0", "OpenID Connect", "OAuth 2.0"],
          "sessionManagement": "centralized_session_store",
          "logoutHandling": "single_logout_support"
        },
        "multiFactorAuthentication": {
          "factors": ["password", "sms", "email", "totp", "biometric"],
          "enforcement": "risk_based_mfa",
          "fallback": "backup_authentication_methods"
        },
        "auditAndCompliance": {
          "accessLogging": "comprehensive_access_logs",
          "complianceReporting": "automated_compliance_reports",
          "dataGovernance": "gdpr_and_privacy_compliance"
        }
      },
      "conditions": {
        "when": "user_authentication_and_authorization_required",
        "context": "secure_multi_user_environment"
      },
      "actions": {
        "then": "apply_iam_integration_patterns",
        "onSuccess": "establish_secure_access_control",
        "onFailure": "fallback_to_basic_authentication"
      },
      "enforcement": "mandatory",
      "metadata": {
        "version": "1.0.0",
        "author": "MPLP Core Team",
        "createdAt": "2025-06-28T11:34:54Z",
        "updatedAt": "2025-06-28T11:34:54Z"
      }
    }
  ]
}