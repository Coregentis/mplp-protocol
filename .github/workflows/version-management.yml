name: Version Management

# Triggered on version tags and manual dispatch
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_id:
        description: 'Prerelease identifier (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

jobs:
  version-check:
    name: Version Validation
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current }}
      new_version: ${{ steps.version.outputs.new }}
      should_release: ${{ steps.version.outputs.should_release }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag
            NEW_VERSION=${GITHUB_REF#refs/tags/}
            echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Calculate new version based on input
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            
            if [[ "${{ github.event.inputs.version_type }}" == "prerelease" ]]; then
              NEW_VERSION=$(npm version prerelease --preid=${{ github.event.inputs.prerelease_id }} --no-git-tag-version)
            else
              NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
            fi
            
            echo "new=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=${{ github.event.inputs.dry_run != 'true' }}" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate version format
        if: steps.version.outputs.new
        run: |
          VERSION="${{ steps.version.outputs.new }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  compatibility-check:
    name: Backward Compatibility Check
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run compatibility check
        run: |
          node scripts/compatibility-checker.js --version=${{ needs.version-check.outputs.new }}
      
      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-report
          path: |
            version-compatibility.json
            compatibility-report.json
          retention-days: 30

  changelog-generation:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [version-check, compatibility-check]
    if: needs.version-check.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate multilingual changelogs
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          node scripts/changelog-generator.js --version=${{ needs.version-check.outputs.new }} --from=$LAST_TAG
      
      - name: Commit changelog updates
        run: |
          git add CHANGELOG.md docs/*/CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changelog changes to commit"
          else
            git commit -m "docs: update changelogs for ${{ needs.version-check.outputs.new }}"
          fi
      
      - name: Upload changelog artifacts
        uses: actions/upload-artifact@v4
        with:
          name: changelogs
          path: |
            CHANGELOG.md
            docs/*/CHANGELOG.md
          retention-days: 30

  version-bump:
    name: Version Bump and Tag
    runs-on: ubuntu-latest
    needs: [version-check, compatibility-check, changelog-generation]
    if: needs.version-check.outputs.should_release == 'true' && github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Download changelog artifacts
        uses: actions/download-artifact@v4
        with:
          name: changelogs
          path: .
      
      - name: Update version files
        run: |
          # Update package.json
          npm version ${{ needs.version-check.outputs.new }} --no-git-tag-version
          
          # Update versions.json using our custom updater
          node -e "
            const updater = require('./scripts/version-updater.js');
            const fs = require('fs');
            const versionsContent = fs.existsSync('versions.json') ? fs.readFileSync('versions.json', 'utf8') : '[]';
            const newContent = updater.writeVersion(versionsContent, '${{ needs.version-check.outputs.new }}'.replace('v', ''));
            fs.writeFileSync('versions.json', newContent);
          "
      
      - name: Commit version changes
        run: |
          git add package.json versions.json CHANGELOG.md docs/*/CHANGELOG.md
          git commit -m "chore(release): ${{ needs.version-check.outputs.new }}"
          git tag ${{ needs.version-check.outputs.new }}
      
      - name: Push changes and tags
        run: |
          git push origin main
          git push origin ${{ needs.version-check.outputs.new }}

  release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [version-check, compatibility-check, changelog-generation]
    if: needs.version-check.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
      
      - name: Run full test suite
        run: |
          npm run test:ci
          npm run validate:examples
          npm run check:frozen
      
      - name: Generate documentation
        run: |
          npm run generate:schema-docs
          npm run sync:docs
      
      - name: Create release package
        run: |
          node scripts/release.js --version ${{ needs.version-check.outputs.new }} --type auto
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package-${{ needs.version-check.outputs.new }}
          path: |
            release/${{ needs.version-check.outputs.new }}/
          retention-days: 90
      
      - name: Create GitHub Release
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version-check.outputs.new }}
          release_name: MPLP ${{ needs.version-check.outputs.new }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.version-check.outputs.new, '-') }}

  notify-release:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [version-check, compatibility-check, changelog-generation, release-package]
    if: always() && needs.version-check.outputs.should_release == 'true'
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.compatibility-check.result }}" == "success" && 
                "${{ needs.changelog-generation.result }}" == "success" && 
                "${{ needs.release-package.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Version ${{ needs.version-check.outputs.new }} released successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Version ${{ needs.version-check.outputs.new }} release failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Create summary
        run: |
          echo "## 🚀 Version Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version-check.outputs.new }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Compatibility Check: ${{ needs.compatibility-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Changelog Generation: ${{ needs.changelog-generation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release Package: ${{ needs.release-package.result }}" >> $GITHUB_STEP_SUMMARY